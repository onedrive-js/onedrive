#!/usr/bin/env node
const program = require('commander');
const inquirer = require('inquirer');
const URL = require('url');
const dotenv = require('dotenv');
const Sentry = require('@sentry/node');
const { interval } = require('rxjs');
const { flatMap, first, filter } = require('rxjs/operators');
const { stringifySync } = require('envfile');
const util = require('util');
const fs = require('fs');
const { ensureFile } = require('fs-extra');
const path = require('path');
const fetch = require('node-fetch');
const client = require('../src/onedrive/client');
const packageData = require('../package.json');

const { createReadStream } = fs;
const writeFile = util.promisify(fs.writeFile);

const CLIENT_ID = '3fbd8409-aee4-47d1-9f09-4a5153af5f3c';

// Load the environment variables.
dotenv.load();

// Initialize Sentry if the user has set the SENTRY_DSN environment variable.
if (process.env.SENTRY_DSN) {
  Sentry.init({
    dsn: process.env.SENTRY_DSN,
    release: `${packageData.name}@${packageData.version}`,
  });
}

program
  .option('-n, --no-write', 'do not write the refresh token to .env')
  .parse(process.argv);

const auth = async () => {
  const params = new URLSearchParams();
  params.set('client_id', CLIENT_ID);
  params.set('scope', 'offline_access files.readwrite');

  const response = await fetch('https://login.microsoftonline.com/common/oauth2/v2.0/devicecode', {
    method: 'POST',
    body: params,
  });

  const data = await response.json();

  console.log(data.message);

  const intval = data.interval || 1;

  const authorization = await interval(intval * 1000).pipe(
    flatMap(() => {
      const tokaneParams = new URLSearchParams();
      tokaneParams.set('grant_type', 'urn:ietf:params:oauth:grant-type:device_code');
      tokaneParams.set('client_id', CLIENT_ID);
      tokaneParams.set('device_code', data.device_code);

      return fetch('https://login.microsoftonline.com/common/oauth2/v2.0/token', {
        method: 'POST',
        body: tokaneParams,
      }).then(r => r.json());
    }),
    filter(authData => authData.error !== 'authorization_pending'),
    first(),
  ).toPromise();

  if (authorization.error) {
    console.error(authorization.error);
    console.error(authorization.error_description);
    process.exitCode = 1;
    return;
  }

  const { refresh_token: refreshToken } = authorization;

  if (program.write === false) {
    console.log(refreshToken);
    return;
  }

  const envPath = path.join(__dirname, '..', '.env');

  let env = {};
  try {
    await ensureFile(envPath);
    const envFile = createReadStream(envPath);
    env = dotenv.parse(envFile);
  } catch (e) {
    // Silence is golden.
  }

  env.ONEDRIVE_REFRESH_TOKEN = refreshToken;

  try {
    await writeFile(envPath, stringifySync(env), {
      flag: 'w+',
    });

    console.log('Refresh Token written to .env');

    return;
  } catch (e) {
    console.error(e);
    process.exitCode = 1;
    return;
  }
}

// Enagage
auth();
